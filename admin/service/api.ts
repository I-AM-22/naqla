/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * naqleh
 * naqleh API
 * OpenAPI spec version: 1.0
 */
import type {
  AddAdvansToCarDto,
  AddAdvansToOrderDto,
  Admin,
  AdminsControllerDeletePathParameters,
  AdminsControllerFindOnePathParameters,
  AdminsControllerUpdatePathParameters,
  Advantage,
  AdvantageSuper,
  AdvantagesControllerDeletePathParameters,
  AdvantagesControllerFindOnePathParameters,
  AdvantagesControllerUpdatePathParameters,
  AuthAdminResponse,
  AuthDriverControllerConfirmParams,
  AuthDriverResponse,
  AuthEmployeeResponse,
  AuthUserControllerConfirmParams,
  AuthUserResponse,
  Car,
  CarControllerAddAdvantagesToCarPathParameters,
  CarControllerDeletePathParameters,
  CarControllerFindOnePathParameters,
  CarControllerRemoveAdvantagesFromCarPathParameters,
  CarControllerUpdatePathParameters,
  CitiesControllerDeletePathParameters,
  CitiesControllerFindOnePathParameters,
  CitiesControllerUpdatePathParameters,
  City,
  ConfirmDriverDto,
  ConfirmUserDto,
  CreateAdminDto,
  CreateAdvantageDto,
  CreateCarDto,
  CreateCityDto,
  CreateEmployeeDto,
  CreateMessageDto,
  CreateOrderDto,
  CreateRoleDto,
  CreateSubOrdersDto,
  Driver,
  DriverWallet,
  DriversControllerDeletePathParameters,
  DriversControllerFindOnePathParameters,
  DriversControllerFindParams,
  DriversControllerStaticsDriverParams,
  DriversControllerUpdatePathParameters,
  DriversControllerWithdrawPathParameters,
  Employee,
  EmployeesControllerDeletePathParameters,
  EmployeesControllerFindOnePathParameters,
  EmployeesControllerUpdatePathParameters,
  LoginAdminDto,
  LoginDriverDto,
  LoginEmployeeDto,
  LoginUserDto,
  Message,
  MessagesControllerDeletePathParameters,
  MessagesControllerFindOnePathParameters,
  MessagesControllerFindPathParameters,
  MessagesControllerUpdatePathParameters,
  Numerical,
  OmitTypeClass,
  Order,
  OrderCarControllerFindMineForOrderPathParameters,
  OrderControllerAcceptancePathParameters,
  OrderControllerAddAdvantagesToOrderPathParameters,
  OrderControllerCancellationPathParameters,
  OrderControllerDeletePathParameters,
  OrderControllerFindOnePathParameters,
  OrderControllerRefusalPathParameters,
  OrderControllerRemoveAdvantagesFromOrderPathParameters,
  OrderControllerUpdatePathParameters,
  OrderStatsDate,
  OrderSubOrder,
  OrdersSubOrdersControllerFindForOrderPathParameters,
  PaginatedResponse,
  Permission,
  PermissionsControllerFindOnePathParameters,
  PhotosControllerUploadMultipleBody,
  PhotosControllerUploadSingleBody,
  ResponseTime,
  Role,
  RolesControllerAddPermissionsPathParameters,
  RolesControllerDeletePermissionsPathParameters,
  RolesControllerFindOnePathParameters,
  RolesControllerUpdatePathParameters,
  SendConfirm,
  SetDriverSubOrderDto,
  Setting,
  SettingsControllerFindOnePathParameters,
  SettingsControllerUpdatePathParameters,
  SignUpDriverDto,
  SignUpUserDto,
  StaticProfits,
  StaticsDriver,
  StaticsUser,
  StatisticsControllerFindForDatePathParameters,
  StatisticsControllerFindLimetAdvantagesPathParameters,
  StatisticsControllerProfitsPathParameters,
  SubOrder,
  SubOrdersControllerDeletePathParameters,
  SubOrdersControllerFindOnePathParameters,
  SubOrdersControllerSetArrivedAtPathParameters,
  SubOrdersControllerSetDeliveredAtPathParameters,
  SubOrdersControllerSetDriverPathParameters,
  SubOrdersControllerSetPickedUpAtPathParameters,
  SubOrdersControllerUpdatePathParameters,
  UpdateAdminDto,
  UpdateAdvantageDto,
  UpdateCarDto,
  UpdateCityDto,
  UpdateDriverDto,
  UpdateDriverPhoneDto,
  UpdateEmployeeDto,
  UpdateMessageDto,
  UpdateOrderDto,
  UpdateRoleDto,
  UpdateSettingDto,
  UpdateSubOrderDto,
  UpdateUserDto,
  UpdateUserPhoneDto,
  UpdateWalletDto,
  User,
  UsersControllerDeletePathParameters,
  UsersControllerDepositPathParameters,
  UsersControllerFindOnePathParameters,
  UsersControllerFindParams,
  UsersControllerGetMyPhotosParams,
  UsersControllerStaticsUserParams,
  UsersControllerUpdatePathParameters,
  UsersControllerWithdrawPathParameters,
} from "./api.schemas";
import { fetchInstance } from "../lib/fetch";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const statisticsControllerFind = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Numerical>(
    { url: `/api/v1/statistics`, method: "GET" },
    options,
  );
};

export const statisticsControllerResponseTime = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<ResponseTime>(
    { url: `/api/v1/statistics/responseTime`, method: "GET" },
    options,
  );
};

export const statisticsControllerFindForDate = (
  { firstDate, secondDate }: StatisticsControllerFindForDatePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<OrderStatsDate[]>(
    {
      url: `/api/v1/statistics/order/${firstDate}/${secondDate}`,
      method: "GET",
    },
    options,
  );
};

export const statisticsControllerProfits = (
  { firstDate, secondDate }: StatisticsControllerProfitsPathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<StaticProfits[]>(
    {
      url: `/api/v1/statistics/profits/${firstDate}/${secondDate}`,
      method: "GET",
    },
    options,
  );
};

export const statisticsControllerFindLimetAdvantages = (
  { limit }: StatisticsControllerFindLimetAdvantagesPathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<AdvantageSuper[]>(
    { url: `/api/v1/statistics/advantages/${limit}`, method: "GET" },
    options,
  );
};

export const usersControllerFind = (
  params?: UsersControllerFindParams,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<PaginatedResponse>(
    { url: `/api/v1/users`, method: "GET", params },
    options,
  );
};

export const usersControllerGetMyPhotos = (
  params?: UsersControllerGetMyPhotosParams,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<PaginatedResponse>(
    { url: `/api/v1/users/myPhotos`, method: "GET", params },
    options,
  );
};

export const usersControllerStaticsUser = (
  params?: UsersControllerStaticsUserParams,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<StaticsUser[]>(
    { url: `/api/v1/users/statics`, method: "GET", params },
    options,
  );
};

export const usersControllerGetMe = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<User>(
    { url: `/api/v1/users/me`, method: "GET" },
    options,
  );
};

export const usersControllerUpdateMe = (
  updateUserDto: UpdateUserDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<User>(
    {
      url: `/api/v1/users/me`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateUserDto,
    },
    options,
  );
};

export const usersControllerDeleteMe = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/users/me`, method: "DELETE" },
    options,
  );
};

export const usersControllerWithdraw = (
  { id }: UsersControllerWithdrawPathParameters,
  updateWalletDto: UpdateWalletDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<User>(
    {
      url: `/api/v1/users/${id}/wallet/withdraw`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateWalletDto,
    },
    options,
  );
};

export const usersControllerDeposit = (
  { id }: UsersControllerDepositPathParameters,
  updateWalletDto: UpdateWalletDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<User>(
    {
      url: `/api/v1/users/${id}/wallet/deposit`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateWalletDto,
    },
    options,
  );
};

export const usersControllerFindOne = (
  { id }: UsersControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<User>(
    { url: `/api/v1/users/${id}`, method: "GET" },
    options,
  );
};

export const usersControllerUpdate = (
  { id }: UsersControllerUpdatePathParameters,
  updateUserDto: UpdateUserDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<User>(
    {
      url: `/api/v1/users/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateUserDto,
    },
    options,
  );
};

export const usersControllerDelete = (
  { id }: UsersControllerDeletePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/users/${id}`, method: "DELETE" },
    options,
  );
};

export const rolesControllerFind = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<OmitTypeClass[]>(
    { url: `/api/v1/roles`, method: "GET" },
    options,
  );
};

export const rolesControllerCreate = (
  createRoleDto: CreateRoleDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Role>(
    {
      url: `/api/v1/roles`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createRoleDto,
    },
    options,
  );
};

export const rolesControllerFindOne = (
  { id }: RolesControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Role>(
    { url: `/api/v1/roles/${id}`, method: "GET" },
    options,
  );
};

export const rolesControllerUpdate = (
  { id }: RolesControllerUpdatePathParameters,
  updateRoleDto: UpdateRoleDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Role>(
    {
      url: `/api/v1/roles/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateRoleDto,
    },
    options,
  );
};

/**
 * @summary add permissions to the role
 */
export const rolesControllerAddPermissions = (
  { id }: RolesControllerAddPermissionsPathParameters,
  updateRoleDto: UpdateRoleDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Role>(
    {
      url: `/api/v1/roles/${id}/permissions`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: updateRoleDto,
    },
    options,
  );
};

/**
 * @summary remove permissions from the role
 */
export const rolesControllerDeletePermissions = (
  { id }: RolesControllerDeletePermissionsPathParameters,
  updateRoleDto: UpdateRoleDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Role>(
    {
      url: `/api/v1/roles/${id}/permissions`,
      method: "DELETE",
      headers: { "Content-Type": "application/json" },
      data: updateRoleDto,
    },
    options,
  );
};

export const permissionsControllerFind = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<OmitTypeClass[]>(
    { url: `/api/v1/permissions`, method: "GET" },
    options,
  );
};

export const permissionsControllerFindOne = (
  { id }: PermissionsControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Permission>(
    { url: `/api/v1/permissions/${id}`, method: "GET" },
    options,
  );
};

export const citiesControllerCreate = (
  createCityDto: CreateCityDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<City>(
    {
      url: `/api/v1/cities`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createCityDto,
    },
    options,
  );
};

export const citiesControllerFind = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<City[]>(
    { url: `/api/v1/cities`, method: "GET" },
    options,
  );
};

export const citiesControllerFindOne = (
  { id }: CitiesControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<City>(
    { url: `/api/v1/cities/${id}`, method: "GET" },
    options,
  );
};

export const citiesControllerUpdate = (
  { id }: CitiesControllerUpdatePathParameters,
  updateCityDto: UpdateCityDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<City>(
    {
      url: `/api/v1/cities/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateCityDto,
    },
    options,
  );
};

export const citiesControllerDelete = (
  { id }: CitiesControllerDeletePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/cities/${id}`, method: "DELETE" },
    options,
  );
};

export const orderControllerCreate = (
  createOrderDto: CreateOrderDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Order>(
    {
      url: `/api/v1/orders`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createOrderDto,
    },
    options,
  );
};

export const orderControllerFindAll = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Order[]>(
    { url: `/api/v1/orders`, method: "GET" },
    options,
  );
};

export const orderControllerFindMine = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Order[]>(
    { url: `/api/v1/orders/mine`, method: "GET" },
    options,
  );
};

export const orderControllerFindMineForAccepted = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Order[]>(
    { url: `/api/v1/orders/accepted`, method: "GET" },
    options,
  );
};

export const orderControllerFindAllWaiting = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Order[]>(
    { url: `/api/v1/orders/waiting`, method: "GET" },
    options,
  );
};

export const orderControllerFindOne = (
  { id }: OrderControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Order>(
    { url: `/api/v1/orders/${id}`, method: "GET" },
    options,
  );
};

export const orderControllerUpdate = (
  { id }: OrderControllerUpdatePathParameters,
  updateOrderDto: UpdateOrderDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Order>(
    {
      url: `/api/v1/orders/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateOrderDto,
    },
    options,
  );
};

export const orderControllerDelete = (
  { id }: OrderControllerDeletePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/orders/${id}`, method: "DELETE" },
    options,
  );
};

export const orderControllerAcceptance = (
  { id }: OrderControllerAcceptancePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Order>(
    { url: `/api/v1/orders/${id}/acceptance`, method: "PATCH" },
    options,
  );
};

export const orderControllerCancellation = (
  { id }: OrderControllerCancellationPathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Order>(
    { url: `/api/v1/orders/${id}/cancellation`, method: "PATCH" },
    options,
  );
};

export const orderControllerRefusal = (
  { id }: OrderControllerRefusalPathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Order>(
    { url: `/api/v1/orders/${id}/refusal`, method: "PATCH" },
    options,
  );
};

export const orderControllerAddAdvantagesToOrder = (
  { id }: OrderControllerAddAdvantagesToOrderPathParameters,
  addAdvansToOrderDto: AddAdvansToOrderDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    {
      url: `/api/v1/orders/${id}/advantages`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: addAdvansToOrderDto,
    },
    options,
  );
};

export const orderControllerRemoveAdvantagesFromOrder = (
  { id, advantageId }: OrderControllerRemoveAdvantagesFromOrderPathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/orders/${id}/advantages/${advantageId}`, method: "DELETE" },
    options,
  );
};

export const advantagesControllerCreate = (
  createAdvantageDto: CreateAdvantageDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Advantage>(
    {
      url: `/api/v1/advantages`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createAdvantageDto,
    },
    options,
  );
};

export const advantagesControllerFindAll = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Advantage[]>(
    { url: `/api/v1/advantages`, method: "GET" },
    options,
  );
};

export const advantagesControllerFindOne = (
  { id }: AdvantagesControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Advantage>(
    { url: `/api/v1/advantages/${id}`, method: "GET" },
    options,
  );
};

export const advantagesControllerUpdate = (
  { id }: AdvantagesControllerUpdatePathParameters,
  updateAdvantageDto: UpdateAdvantageDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Advantage>(
    {
      url: `/api/v1/advantages/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateAdvantageDto,
    },
    options,
  );
};

export const advantagesControllerDelete = (
  { id }: AdvantagesControllerDeletePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/advantages/${id}`, method: "DELETE" },
    options,
  );
};

export const settingsControllerFindAll = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Setting[]>(
    { url: `/api/settings`, method: "GET" },
    options,
  );
};

export const settingsControllerFindOne = (
  { id }: SettingsControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Setting>(
    { url: `/api/settings/${id}`, method: "GET" },
    options,
  );
};

export const settingsControllerUpdate = (
  { id }: SettingsControllerUpdatePathParameters,
  updateSettingDto: UpdateSettingDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Setting>(
    {
      url: `/api/settings/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateSettingDto,
    },
    options,
  );
};

export const subOrdersControllerCreate = (
  createSubOrdersDto: CreateSubOrdersDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Order>(
    {
      url: `/api/v1/sub-orders`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createSubOrdersDto,
    },
    options,
  );
};

export const subOrdersControllerFindAll = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SubOrder[]>(
    { url: `/api/v1/sub-orders`, method: "GET" },
    options,
  );
};

export const subOrdersControllerFindAllForDriver = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SubOrder[]>(
    { url: `/api/v1/sub-orders/for-driver`, method: "GET" },
    options,
  );
};

export const subOrdersControllerFindAllActiveForDriver = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SubOrder[]>(
    { url: `/api/v1/sub-orders/active-driver`, method: "GET" },
    options,
  );
};

export const subOrdersControllerFindIsDoneForDriver = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SubOrder[]>(
    { url: `/api/v1/sub-orders/done-driver`, method: "GET" },
    options,
  );
};

export const subOrdersControllerFindOne = (
  { id }: SubOrdersControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SubOrder>(
    { url: `/api/v1/sub-orders/${id}`, method: "GET" },
    options,
  );
};

export const subOrdersControllerUpdate = (
  { id }: SubOrdersControllerUpdatePathParameters,
  updateSubOrderDto: UpdateSubOrderDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SubOrder>(
    {
      url: `/api/v1/sub-orders/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateSubOrderDto,
    },
    options,
  );
};

export const subOrdersControllerDelete = (
  { id }: SubOrdersControllerDeletePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/sub-orders/${id}`, method: "DELETE" },
    options,
  );
};

export const subOrdersControllerSetArrivedAt = (
  { id }: SubOrdersControllerSetArrivedAtPathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SubOrder>(
    { url: `/api/v1/sub-orders/${id}/setArrivedAt`, method: "PATCH" },
    options,
  );
};

export const subOrdersControllerSetPickedUpAt = (
  { id }: SubOrdersControllerSetPickedUpAtPathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SubOrder>(
    { url: `/api/v1/sub-orders/${id}/setPickedUpAt`, method: "PATCH" },
    options,
  );
};

export const subOrdersControllerSetDeliveredAt = (
  { id }: SubOrdersControllerSetDeliveredAtPathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SubOrder>(
    { url: `/api/v1/sub-orders/${id}/setDeliveredAt`, method: "PATCH" },
    options,
  );
};

export const subOrdersControllerSetDriver = (
  { id }: SubOrdersControllerSetDriverPathParameters,
  setDriverSubOrderDto: SetDriverSubOrderDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SubOrder>(
    {
      url: `/api/v1/sub-orders/${id}/setDriver`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: setDriverSubOrderDto,
    },
    options,
  );
};

export const ordersSubOrdersControllerFindForOrder = (
  { id }: OrdersSubOrdersControllerFindForOrderPathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<OrderSubOrder[]>(
    { url: `/api/v1/orders/${id}/sub-orders`, method: "GET" },
    options,
  );
};

export const driversControllerFind = (
  params?: DriversControllerFindParams,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<PaginatedResponse>(
    { url: `/api/v1/drivers`, method: "GET", params },
    options,
  );
};

export const driversControllerStaticsDriver = (
  params?: DriversControllerStaticsDriverParams,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<StaticsDriver[]>(
    { url: `/api/v1/drivers/statics`, method: "GET", params },
    options,
  );
};

export const driversControllerGetMyPhotos = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Driver>(
    { url: `/api/v1/drivers/myPhotos`, method: "GET" },
    options,
  );
};

export const driversControllerGetMe = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Driver>(
    { url: `/api/v1/drivers/me`, method: "GET" },
    options,
  );
};

export const driversControllerUpdateMe = (
  updateDriverDto: UpdateDriverDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Driver>(
    {
      url: `/api/v1/drivers/me`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateDriverDto,
    },
    options,
  );
};

export const driversControllerDeleteMe = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/drivers/me`, method: "DELETE" },
    options,
  );
};

export const driversControllerWithdraw = (
  { id }: DriversControllerWithdrawPathParameters,
  updateWalletDto: UpdateWalletDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<DriverWallet>(
    {
      url: `/api/v1/drivers/${id}/wallet/withdraw`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateWalletDto,
    },
    options,
  );
};

export const driversControllerFindOne = (
  { id }: DriversControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Driver>(
    { url: `/api/v1/drivers/${id}`, method: "GET" },
    options,
  );
};

export const driversControllerUpdate = (
  { id }: DriversControllerUpdatePathParameters,
  updateDriverDto: UpdateDriverDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Driver>(
    {
      url: `/api/v1/drivers/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateDriverDto,
    },
    options,
  );
};

export const driversControllerDelete = (
  { id }: DriversControllerDeletePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/drivers/${id}`, method: "DELETE" },
    options,
  );
};

export const carControllerFindMine = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Car[]>(
    { url: `/api/v1/cars/mine`, method: "GET" },
    options,
  );
};

export const carControllerFindAll = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Car[]>(
    { url: `/api/v1/cars/all`, method: "GET" },
    options,
  );
};

export const carControllerFindOne = (
  { id }: CarControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Car>(
    { url: `/api/v1/cars/${id}`, method: "GET" },
    options,
  );
};

export const carControllerUpdate = (
  { id }: CarControllerUpdatePathParameters,
  updateCarDto: UpdateCarDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Car>(
    {
      url: `/api/v1/cars/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateCarDto,
    },
    options,
  );
};

export const carControllerDelete = (
  { id }: CarControllerDeletePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/cars/${id}`, method: "DELETE" },
    options,
  );
};

export const carControllerCreate = (
  createCarDto: CreateCarDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Car>(
    {
      url: `/api/v1/cars`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createCarDto,
    },
    options,
  );
};

export const carControllerAddAdvantagesToCar = (
  { id }: CarControllerAddAdvantagesToCarPathParameters,
  addAdvansToCarDto: AddAdvansToCarDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    {
      url: `/api/v1/cars/${id}/advantages`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: addAdvansToCarDto,
    },
    options,
  );
};

export const carControllerRemoveAdvantagesFromCar = (
  { id, advantageId }: CarControllerRemoveAdvantagesFromCarPathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/cars/${id}/advantages/${advantageId}`, method: "DELETE" },
    options,
  );
};

export const orderCarControllerFindMineForOrder = (
  { id }: OrderCarControllerFindMineForOrderPathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Car[]>(
    { url: `/api/v1/orders/${id}/cars/mine`, method: "GET" },
    options,
  );
};

export const authUserControllerSignup = (
  signUpUserDto: SignUpUserDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SendConfirm>(
    {
      url: `/api/v1/auth/user/signup`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signUpUserDto,
    },
    options,
  );
};

/**
 * @summary Login
 */
export const authUserControllerLogin = (
  loginUserDto: LoginUserDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SendConfirm>(
    {
      url: `/api/v1/auth/user/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginUserDto,
    },
    options,
  );
};

/**
 * @summary Confirm
 */
export const authUserControllerConfirm = (
  confirmUserDto: ConfirmUserDto,
  params: AuthUserControllerConfirmParams,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<AuthUserResponse>(
    {
      url: `/api/v1/auth/user/confirm`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: confirmUserDto,
      params,
    },
    options,
  );
};

/**
 * @summary update phone number
 */
export const authUserControllerUpdateMyNumber = (
  updateUserPhoneDto: UpdateUserPhoneDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SendConfirm>(
    {
      url: `/api/v1/auth/user/updateMyNumber`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateUserPhoneDto,
    },
    options,
  );
};

/**
 * @summary Login
 */
export const employeesControllerLogin = (
  loginEmployeeDto: LoginEmployeeDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<AuthEmployeeResponse>(
    {
      url: `/api/v1/employees/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginEmployeeDto,
    },
    options,
  );
};

export const employeesControllerFind = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Employee>(
    { url: `/api/v1/employees`, method: "GET" },
    options,
  );
};

export const employeesControllerCreate = (
  createEmployeeDto: CreateEmployeeDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Employee>(
    {
      url: `/api/v1/employees`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createEmployeeDto,
    },
    options,
  );
};

export const employeesControllerFindOne = (
  { id }: EmployeesControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Employee>(
    { url: `/api/v1/employees/${id}`, method: "GET" },
    options,
  );
};

export const employeesControllerUpdate = (
  { id }: EmployeesControllerUpdatePathParameters,
  updateEmployeeDto: UpdateEmployeeDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Employee>(
    {
      url: `/api/v1/employees/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateEmployeeDto,
    },
    options,
  );
};

export const employeesControllerDelete = (
  { id }: EmployeesControllerDeletePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/employees/${id}`, method: "DELETE" },
    options,
  );
};

/**
 * @summary Login
 */
export const adminsControllerLogin = (
  loginAdminDto: LoginAdminDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<AuthAdminResponse>(
    {
      url: `/api/v1/admins/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginAdminDto,
    },
    options,
  );
};

export const adminsControllerCreate = (
  createAdminDto: CreateAdminDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Admin>(
    {
      url: `/api/v1/admins`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createAdminDto,
    },
    options,
  );
};

export const adminsControllerFind = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Admin>(
    { url: `/api/v1/admins`, method: "GET" },
    options,
  );
};

export const adminsControllerFindOne = (
  { id }: AdminsControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Admin>(
    { url: `/api/v1/admins/${id}`, method: "GET" },
    options,
  );
};

export const adminsControllerUpdate = (
  { id }: AdminsControllerUpdatePathParameters,
  updateAdminDto: UpdateAdminDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Admin>(
    {
      url: `/api/v1/admins/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateAdminDto,
    },
    options,
  );
};

export const adminsControllerDelete = (
  { id }: AdminsControllerDeletePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/admins/${id}`, method: "DELETE" },
    options,
  );
};

export const authDriverControllerSignup = (
  signUpDriverDto: SignUpDriverDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SendConfirm>(
    {
      url: `/api/v1/auth/driver/signup`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signUpDriverDto,
    },
    options,
  );
};

/**
 * @summary Login
 */
export const authDriverControllerLogin = (
  loginDriverDto: LoginDriverDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SendConfirm>(
    {
      url: `/api/v1/auth/driver/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginDriverDto,
    },
    options,
  );
};

/**
 * @summary Confirm
 */
export const authDriverControllerConfirm = (
  confirmDriverDto: ConfirmDriverDto,
  params: AuthDriverControllerConfirmParams,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<AuthDriverResponse>(
    {
      url: `/api/v1/auth/driver/confirm`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: confirmDriverDto,
      params,
    },
    options,
  );
};

/**
 * @summary update phone number
 */
export const authDriverControllerUpdateMyNumber = (
  updateDriverPhoneDto: UpdateDriverPhoneDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SendConfirm>(
    {
      url: `/api/v1/auth/driver/updateMyNumber`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateDriverPhoneDto,
    },
    options,
  );
};

/**
 * @summary Upload single photo
 */
export const photosControllerUploadSingle = (
  photosControllerUploadSingleBody: PhotosControllerUploadSingleBody,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  const formData = new FormData();
  formData.append("photo", photosControllerUploadSingleBody.photo);

  return fetchInstance<void>(
    {
      url: `/api/v1/photos/single`,
      method: "POST",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};

/**
 * Upload up to 3 photos at a time.
 * @summary Upload multiple photos
 */
export const photosControllerUploadMultiple = (
  photosControllerUploadMultipleBody: PhotosControllerUploadMultipleBody,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  const formData = new FormData();
  photosControllerUploadMultipleBody.photos.forEach((value) =>
    formData.append("photos", value),
  );

  return fetchInstance<void>(
    {
      url: `/api/v1/photos/multiple`,
      method: "POST",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};

export const messagesControllerFind = (
  { subOrderId }: MessagesControllerFindPathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<PaginatedResponse>(
    { url: `/api/v1/messages/${subOrderId}`, method: "GET" },
    options,
  );
};

export const messagesControllerFindOne = (
  { id }: MessagesControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Message>(
    { url: `/api/v1/messages/${id}`, method: "GET" },
    options,
  );
};

export const messagesControllerUpdate = (
  { id }: MessagesControllerUpdatePathParameters,
  updateMessageDto: UpdateMessageDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Message>(
    {
      url: `/api/v1/messages/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateMessageDto,
    },
    options,
  );
};

export const messagesControllerDelete = (
  { id }: MessagesControllerDeletePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/messages/${id}`, method: "DELETE" },
    options,
  );
};

export const messagesControllerCreate = (
  createMessageDto: CreateMessageDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Message>(
    {
      url: `/api/v1/messages`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createMessageDto,
    },
    options,
  );
};

export type StatisticsControllerFindResult = NonNullable<
  Awaited<ReturnType<typeof statisticsControllerFind>>
>;
export type StatisticsControllerResponseTimeResult = NonNullable<
  Awaited<ReturnType<typeof statisticsControllerResponseTime>>
>;
export type StatisticsControllerFindForDateResult = NonNullable<
  Awaited<ReturnType<typeof statisticsControllerFindForDate>>
>;
export type StatisticsControllerProfitsResult = NonNullable<
  Awaited<ReturnType<typeof statisticsControllerProfits>>
>;
export type StatisticsControllerFindLimetAdvantagesResult = NonNullable<
  Awaited<ReturnType<typeof statisticsControllerFindLimetAdvantages>>
>;
export type UsersControllerFindResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFind>>
>;
export type UsersControllerGetMyPhotosResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerGetMyPhotos>>
>;
export type UsersControllerStaticsUserResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerStaticsUser>>
>;
export type UsersControllerGetMeResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerGetMe>>
>;
export type UsersControllerUpdateMeResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerUpdateMe>>
>;
export type UsersControllerDeleteMeResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerDeleteMe>>
>;
export type UsersControllerWithdrawResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerWithdraw>>
>;
export type UsersControllerDepositResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerDeposit>>
>;
export type UsersControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFindOne>>
>;
export type UsersControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerUpdate>>
>;
export type UsersControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerDelete>>
>;
export type RolesControllerFindResult = NonNullable<
  Awaited<ReturnType<typeof rolesControllerFind>>
>;
export type RolesControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof rolesControllerCreate>>
>;
export type RolesControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof rolesControllerFindOne>>
>;
export type RolesControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof rolesControllerUpdate>>
>;
export type RolesControllerAddPermissionsResult = NonNullable<
  Awaited<ReturnType<typeof rolesControllerAddPermissions>>
>;
export type RolesControllerDeletePermissionsResult = NonNullable<
  Awaited<ReturnType<typeof rolesControllerDeletePermissions>>
>;
export type PermissionsControllerFindResult = NonNullable<
  Awaited<ReturnType<typeof permissionsControllerFind>>
>;
export type PermissionsControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof permissionsControllerFindOne>>
>;
export type CitiesControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof citiesControllerCreate>>
>;
export type CitiesControllerFindResult = NonNullable<
  Awaited<ReturnType<typeof citiesControllerFind>>
>;
export type CitiesControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof citiesControllerFindOne>>
>;
export type CitiesControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof citiesControllerUpdate>>
>;
export type CitiesControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof citiesControllerDelete>>
>;
export type OrderControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof orderControllerCreate>>
>;
export type OrderControllerFindAllResult = NonNullable<
  Awaited<ReturnType<typeof orderControllerFindAll>>
>;
export type OrderControllerFindMineResult = NonNullable<
  Awaited<ReturnType<typeof orderControllerFindMine>>
>;
export type OrderControllerFindMineForAcceptedResult = NonNullable<
  Awaited<ReturnType<typeof orderControllerFindMineForAccepted>>
>;
export type OrderControllerFindAllWaitingResult = NonNullable<
  Awaited<ReturnType<typeof orderControllerFindAllWaiting>>
>;
export type OrderControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof orderControllerFindOne>>
>;
export type OrderControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof orderControllerUpdate>>
>;
export type OrderControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof orderControllerDelete>>
>;
export type OrderControllerAcceptanceResult = NonNullable<
  Awaited<ReturnType<typeof orderControllerAcceptance>>
>;
export type OrderControllerCancellationResult = NonNullable<
  Awaited<ReturnType<typeof orderControllerCancellation>>
>;
export type OrderControllerRefusalResult = NonNullable<
  Awaited<ReturnType<typeof orderControllerRefusal>>
>;
export type OrderControllerAddAdvantagesToOrderResult = NonNullable<
  Awaited<ReturnType<typeof orderControllerAddAdvantagesToOrder>>
>;
export type OrderControllerRemoveAdvantagesFromOrderResult = NonNullable<
  Awaited<ReturnType<typeof orderControllerRemoveAdvantagesFromOrder>>
>;
export type AdvantagesControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof advantagesControllerCreate>>
>;
export type AdvantagesControllerFindAllResult = NonNullable<
  Awaited<ReturnType<typeof advantagesControllerFindAll>>
>;
export type AdvantagesControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof advantagesControllerFindOne>>
>;
export type AdvantagesControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof advantagesControllerUpdate>>
>;
export type AdvantagesControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof advantagesControllerDelete>>
>;
export type SettingsControllerFindAllResult = NonNullable<
  Awaited<ReturnType<typeof settingsControllerFindAll>>
>;
export type SettingsControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof settingsControllerFindOne>>
>;
export type SettingsControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof settingsControllerUpdate>>
>;
export type SubOrdersControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof subOrdersControllerCreate>>
>;
export type SubOrdersControllerFindAllResult = NonNullable<
  Awaited<ReturnType<typeof subOrdersControllerFindAll>>
>;
export type SubOrdersControllerFindAllForDriverResult = NonNullable<
  Awaited<ReturnType<typeof subOrdersControllerFindAllForDriver>>
>;
export type SubOrdersControllerFindAllActiveForDriverResult = NonNullable<
  Awaited<ReturnType<typeof subOrdersControllerFindAllActiveForDriver>>
>;
export type SubOrdersControllerFindIsDoneForDriverResult = NonNullable<
  Awaited<ReturnType<typeof subOrdersControllerFindIsDoneForDriver>>
>;
export type SubOrdersControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof subOrdersControllerFindOne>>
>;
export type SubOrdersControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof subOrdersControllerUpdate>>
>;
export type SubOrdersControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof subOrdersControllerDelete>>
>;
export type SubOrdersControllerSetArrivedAtResult = NonNullable<
  Awaited<ReturnType<typeof subOrdersControllerSetArrivedAt>>
>;
export type SubOrdersControllerSetPickedUpAtResult = NonNullable<
  Awaited<ReturnType<typeof subOrdersControllerSetPickedUpAt>>
>;
export type SubOrdersControllerSetDeliveredAtResult = NonNullable<
  Awaited<ReturnType<typeof subOrdersControllerSetDeliveredAt>>
>;
export type SubOrdersControllerSetDriverResult = NonNullable<
  Awaited<ReturnType<typeof subOrdersControllerSetDriver>>
>;
export type OrdersSubOrdersControllerFindForOrderResult = NonNullable<
  Awaited<ReturnType<typeof ordersSubOrdersControllerFindForOrder>>
>;
export type DriversControllerFindResult = NonNullable<
  Awaited<ReturnType<typeof driversControllerFind>>
>;
export type DriversControllerStaticsDriverResult = NonNullable<
  Awaited<ReturnType<typeof driversControllerStaticsDriver>>
>;
export type DriversControllerGetMyPhotosResult = NonNullable<
  Awaited<ReturnType<typeof driversControllerGetMyPhotos>>
>;
export type DriversControllerGetMeResult = NonNullable<
  Awaited<ReturnType<typeof driversControllerGetMe>>
>;
export type DriversControllerUpdateMeResult = NonNullable<
  Awaited<ReturnType<typeof driversControllerUpdateMe>>
>;
export type DriversControllerDeleteMeResult = NonNullable<
  Awaited<ReturnType<typeof driversControllerDeleteMe>>
>;
export type DriversControllerWithdrawResult = NonNullable<
  Awaited<ReturnType<typeof driversControllerWithdraw>>
>;
export type DriversControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof driversControllerFindOne>>
>;
export type DriversControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof driversControllerUpdate>>
>;
export type DriversControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof driversControllerDelete>>
>;
export type CarControllerFindMineResult = NonNullable<
  Awaited<ReturnType<typeof carControllerFindMine>>
>;
export type CarControllerFindAllResult = NonNullable<
  Awaited<ReturnType<typeof carControllerFindAll>>
>;
export type CarControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof carControllerFindOne>>
>;
export type CarControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof carControllerUpdate>>
>;
export type CarControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof carControllerDelete>>
>;
export type CarControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof carControllerCreate>>
>;
export type CarControllerAddAdvantagesToCarResult = NonNullable<
  Awaited<ReturnType<typeof carControllerAddAdvantagesToCar>>
>;
export type CarControllerRemoveAdvantagesFromCarResult = NonNullable<
  Awaited<ReturnType<typeof carControllerRemoveAdvantagesFromCar>>
>;
export type OrderCarControllerFindMineForOrderResult = NonNullable<
  Awaited<ReturnType<typeof orderCarControllerFindMineForOrder>>
>;
export type AuthUserControllerSignupResult = NonNullable<
  Awaited<ReturnType<typeof authUserControllerSignup>>
>;
export type AuthUserControllerLoginResult = NonNullable<
  Awaited<ReturnType<typeof authUserControllerLogin>>
>;
export type AuthUserControllerConfirmResult = NonNullable<
  Awaited<ReturnType<typeof authUserControllerConfirm>>
>;
export type AuthUserControllerUpdateMyNumberResult = NonNullable<
  Awaited<ReturnType<typeof authUserControllerUpdateMyNumber>>
>;
export type EmployeesControllerLoginResult = NonNullable<
  Awaited<ReturnType<typeof employeesControllerLogin>>
>;
export type EmployeesControllerFindResult = NonNullable<
  Awaited<ReturnType<typeof employeesControllerFind>>
>;
export type EmployeesControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof employeesControllerCreate>>
>;
export type EmployeesControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof employeesControllerFindOne>>
>;
export type EmployeesControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof employeesControllerUpdate>>
>;
export type EmployeesControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof employeesControllerDelete>>
>;
export type AdminsControllerLoginResult = NonNullable<
  Awaited<ReturnType<typeof adminsControllerLogin>>
>;
export type AdminsControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof adminsControllerCreate>>
>;
export type AdminsControllerFindResult = NonNullable<
  Awaited<ReturnType<typeof adminsControllerFind>>
>;
export type AdminsControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof adminsControllerFindOne>>
>;
export type AdminsControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof adminsControllerUpdate>>
>;
export type AdminsControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof adminsControllerDelete>>
>;
export type AuthDriverControllerSignupResult = NonNullable<
  Awaited<ReturnType<typeof authDriverControllerSignup>>
>;
export type AuthDriverControllerLoginResult = NonNullable<
  Awaited<ReturnType<typeof authDriverControllerLogin>>
>;
export type AuthDriverControllerConfirmResult = NonNullable<
  Awaited<ReturnType<typeof authDriverControllerConfirm>>
>;
export type AuthDriverControllerUpdateMyNumberResult = NonNullable<
  Awaited<ReturnType<typeof authDriverControllerUpdateMyNumber>>
>;
export type PhotosControllerUploadSingleResult = NonNullable<
  Awaited<ReturnType<typeof photosControllerUploadSingle>>
>;
export type PhotosControllerUploadMultipleResult = NonNullable<
  Awaited<ReturnType<typeof photosControllerUploadMultiple>>
>;
export type MessagesControllerFindResult = NonNullable<
  Awaited<ReturnType<typeof messagesControllerFind>>
>;
export type MessagesControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof messagesControllerFindOne>>
>;
export type MessagesControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof messagesControllerUpdate>>
>;
export type MessagesControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof messagesControllerDelete>>
>;
export type MessagesControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof messagesControllerCreate>>
>;
