/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * naqleh
 * naqleh API
 * OpenAPI spec version: 1.0
 */
import type {
  Admin,
  AdminsControllerFindOnePathParameters,
  AdminsControllerRemovePathParameters,
  AdminsControllerUpdatePathParameters,
  AuthAdminResponse,
  AuthControllerConfirmParams,
  AuthEmployeeResponse,
  AuthUserResponse,
  CitiesControllerFindOnePathParameters,
  CitiesControllerRemovePathParameters,
  CitiesControllerUpdatePathParameters,
  City,
  ConfirmDto,
  CreateAdminDto,
  CreateCityDto,
  CreateDriverDto,
  CreateEmployeeDto,
  CreateRoleDto,
  DriverControllerFindOnePathParameters,
  DriverControllerRemovePathParameters,
  DriverControllerUpdatePathParameters,
  Employee,
  EmployeesControllerFindOnePathParameters,
  EmployeesControllerRemovePathParameters,
  EmployeesControllerUpdatePathParameters,
  LoginAdminDto,
  LoginDto,
  OmitTypeClass,
  PaginatedResponse,
  Permission,
  PermissionsControllerFindOnePathParameters,
  PhotosControllerUploadMultipleBody,
  PhotosControllerUploadSingleBody,
  Role,
  RolesControllerAddPermissionsPathParameters,
  RolesControllerDeletePermissionsPathParameters,
  RolesControllerFindOnePathParameters,
  RolesControllerUpdatePathParameters,
  SendConfirm,
  SignUpDto,
  UpdateAdminDto,
  UpdateCityDto,
  UpdateDriverDto,
  UpdateEmployeeDto,
  UpdatePhoneDto,
  UpdateRoleDto,
  UpdateUserDto,
  User,
  UsersControllerFindOnePathParameters,
  UsersControllerFindParams,
  UsersControllerRemovePathParameters,
  UsersControllerUpdatePathParameters,
} from "./api.schemas";
import { fetchInstance } from "../lib/fetch";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const authControllerSignup = (
  signUpDto: SignUpDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SendConfirm>(
    {
      url: `/api/v1/auth/signup`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signUpDto,
    },
    options,
  );
};

/**
 * @summary Login
 */
export const authControllerLogin = (
  loginDto: LoginDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SendConfirm>(
    {
      url: `/api/v1/auth/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginDto,
    },
    options,
  );
};

/**
 * @summary Confirm
 */
export const authControllerConfirm = (
  confirmDto: ConfirmDto,
  params: AuthControllerConfirmParams,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<AuthUserResponse>(
    {
      url: `/api/v1/auth/confirm`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: confirmDto,
      params,
    },
    options,
  );
};

/**
 * @summary update phone number
 */
export const authControllerUpdateMyNumber = (
  updatePhoneDto: UpdatePhoneDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<SendConfirm>(
    {
      url: `/api/v1/auth/updateMyNumber`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updatePhoneDto,
    },
    options,
  );
};

export const usersControllerFind = (
  params?: UsersControllerFindParams,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<PaginatedResponse>(
    { url: `/api/v1/users`, method: "GET", params },
    options,
  );
};

export const usersControllerGetMyPhotos = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<User>(
    { url: `/api/v1/users/myPhotos`, method: "GET" },
    options,
  );
};

export const usersControllerGetMe = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<User>(
    { url: `/api/v1/users/me`, method: "GET" },
    options,
  );
};

export const usersControllerUpdateMe = (
  updateUserDto: UpdateUserDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<User>(
    {
      url: `/api/v1/users/me`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateUserDto,
    },
    options,
  );
};

export const usersControllerDeleteMe = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/users/me`, method: "DELETE" },
    options,
  );
};

export const usersControllerFindOne = (
  { id }: UsersControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<User>(
    { url: `/api/v1/users/${id}`, method: "GET" },
    options,
  );
};

export const usersControllerUpdate = (
  { id }: UsersControllerUpdatePathParameters,
  updateUserDto: UpdateUserDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<User>(
    {
      url: `/api/v1/users/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateUserDto,
    },
    options,
  );
};

export const usersControllerRemove = (
  { id }: UsersControllerRemovePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/users/${id}`, method: "DELETE" },
    options,
  );
};

export const citiesControllerCreate = (
  createCityDto: CreateCityDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<City>(
    {
      url: `/api/v1/cities`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createCityDto,
    },
    options,
  );
};

export const citiesControllerFind = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<City[]>(
    { url: `/api/v1/cities`, method: "GET" },
    options,
  );
};

export const citiesControllerFindOne = (
  { id }: CitiesControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<City>(
    { url: `/api/v1/cities/${id}`, method: "GET" },
    options,
  );
};

export const citiesControllerUpdate = (
  { id }: CitiesControllerUpdatePathParameters,
  updateCityDto: UpdateCityDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<City>(
    {
      url: `/api/v1/cities/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateCityDto,
    },
    options,
  );
};

export const citiesControllerRemove = (
  { id }: CitiesControllerRemovePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/cities/${id}`, method: "DELETE" },
    options,
  );
};

/**
 * @summary Login
 */
export const employeesControllerLogin = (
  loginDto: LoginDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<AuthEmployeeResponse>(
    {
      url: `/api/v1/employees/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginDto,
    },
    options,
  );
};

export const employeesControllerFind = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Employee>(
    { url: `/api/v1/employees`, method: "GET" },
    options,
  );
};

export const employeesControllerCreate = (
  createEmployeeDto: CreateEmployeeDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Employee>(
    {
      url: `/api/v1/employees`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createEmployeeDto,
    },
    options,
  );
};

export const employeesControllerFindOne = (
  { id }: EmployeesControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Employee>(
    { url: `/api/v1/employees/${id}`, method: "GET" },
    options,
  );
};

export const employeesControllerUpdate = (
  { id }: EmployeesControllerUpdatePathParameters,
  updateEmployeeDto: UpdateEmployeeDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Employee>(
    {
      url: `/api/v1/employees/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateEmployeeDto,
    },
    options,
  );
};

export const employeesControllerRemove = (
  { id }: EmployeesControllerRemovePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/employees/${id}`, method: "DELETE" },
    options,
  );
};

/**
 * @summary Login
 */
export const adminsControllerLogin = (
  loginAdminDto: LoginAdminDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<AuthAdminResponse>(
    {
      url: `/api/v1/admins/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginAdminDto,
    },
    options,
  );
};

export const adminsControllerCreate = (
  createAdminDto: CreateAdminDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Admin>(
    {
      url: `/api/v1/admins`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createAdminDto,
    },
    options,
  );
};

export const adminsControllerFind = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Admin>(
    { url: `/api/v1/admins`, method: "GET" },
    options,
  );
};

export const adminsControllerFindOne = (
  { id }: AdminsControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Admin>(
    { url: `/api/v1/admins/${id}`, method: "GET" },
    options,
  );
};

export const adminsControllerUpdate = (
  { id }: AdminsControllerUpdatePathParameters,
  updateAdminDto: UpdateAdminDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Admin>(
    {
      url: `/api/v1/admins/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateAdminDto,
    },
    options,
  );
};

export const adminsControllerRemove = (
  { id }: AdminsControllerRemovePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/v1/admins/${id}`, method: "DELETE" },
    options,
  );
};

export const rolesControllerFind = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<OmitTypeClass[]>(
    { url: `/api/v1/roles`, method: "GET" },
    options,
  );
};

export const rolesControllerCreate = (
  createRoleDto: CreateRoleDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Role>(
    {
      url: `/api/v1/roles`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createRoleDto,
    },
    options,
  );
};

export const rolesControllerFindOne = (
  { id }: RolesControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Role>(
    { url: `/api/v1/roles/${id}`, method: "GET" },
    options,
  );
};

export const rolesControllerUpdate = (
  { id }: RolesControllerUpdatePathParameters,
  updateRoleDto: UpdateRoleDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Role>(
    {
      url: `/api/v1/roles/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateRoleDto,
    },
    options,
  );
};

/**
 * @summary add permissions to the role
 */
export const rolesControllerAddPermissions = (
  { id }: RolesControllerAddPermissionsPathParameters,
  updateRoleDto: UpdateRoleDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Role>(
    {
      url: `/api/v1/roles/${id}/permissions`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: updateRoleDto,
    },
    options,
  );
};

/**
 * @summary remove permissions from the role
 */
export const rolesControllerDeletePermissions = (
  { id }: RolesControllerDeletePermissionsPathParameters,
  updateRoleDto: UpdateRoleDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Role>(
    {
      url: `/api/v1/roles/${id}/permissions`,
      method: "DELETE",
      headers: { "Content-Type": "application/json" },
      data: updateRoleDto,
    },
    options,
  );
};

export const permissionsControllerFind = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<OmitTypeClass[]>(
    { url: `/api/v1/permissions`, method: "GET" },
    options,
  );
};

export const permissionsControllerFindOne = (
  { id }: PermissionsControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<Permission>(
    { url: `/api/v1/permissions/${id}`, method: "GET" },
    options,
  );
};

/**
 * @summary Upload single photo
 */
export const photosControllerUploadSingle = (
  photosControllerUploadSingleBody: PhotosControllerUploadSingleBody,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  const formData = new FormData();
  formData.append("photo", photosControllerUploadSingleBody.photo);

  return fetchInstance<void>(
    {
      url: `/api/v1/photos/single`,
      method: "POST",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};

/**
 * Upload up to 3 photos at a time.
 * @summary Upload multiple photos
 */
export const photosControllerUploadMultiple = (
  photosControllerUploadMultipleBody: PhotosControllerUploadMultipleBody,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  const formData = new FormData();
  photosControllerUploadMultipleBody.photos.forEach((value) =>
    formData.append("photos", value),
  );

  return fetchInstance<void>(
    {
      url: `/api/v1/photos/multiple`,
      method: "POST",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};

export const driverControllerCreate = (
  createDriverDto: CreateDriverDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    {
      url: `/api/driver`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createDriverDto,
    },
    options,
  );
};

export const driverControllerFindAll = (
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>({ url: `/api/driver`, method: "GET" }, options);
};

export const driverControllerFindOne = (
  { id }: DriverControllerFindOnePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/driver/${id}`, method: "GET" },
    options,
  );
};

export const driverControllerUpdate = (
  { id }: DriverControllerUpdatePathParameters,
  updateDriverDto: UpdateDriverDto,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    {
      url: `/api/driver/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateDriverDto,
    },
    options,
  );
};

export const driverControllerRemove = (
  { id }: DriverControllerRemovePathParameters,
  options?: SecondParameter<typeof fetchInstance>,
) => {
  return fetchInstance<void>(
    { url: `/api/driver/${id}`, method: "DELETE" },
    options,
  );
};

export type AuthControllerSignupResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignup>>
>;
export type AuthControllerLoginResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>;
export type AuthControllerConfirmResult = NonNullable<
  Awaited<ReturnType<typeof authControllerConfirm>>
>;
export type AuthControllerUpdateMyNumberResult = NonNullable<
  Awaited<ReturnType<typeof authControllerUpdateMyNumber>>
>;
export type UsersControllerFindResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFind>>
>;
export type UsersControllerGetMyPhotosResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerGetMyPhotos>>
>;
export type UsersControllerGetMeResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerGetMe>>
>;
export type UsersControllerUpdateMeResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerUpdateMe>>
>;
export type UsersControllerDeleteMeResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerDeleteMe>>
>;
export type UsersControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFindOne>>
>;
export type UsersControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerUpdate>>
>;
export type UsersControllerRemoveResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerRemove>>
>;
export type CitiesControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof citiesControllerCreate>>
>;
export type CitiesControllerFindResult = NonNullable<
  Awaited<ReturnType<typeof citiesControllerFind>>
>;
export type CitiesControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof citiesControllerFindOne>>
>;
export type CitiesControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof citiesControllerUpdate>>
>;
export type CitiesControllerRemoveResult = NonNullable<
  Awaited<ReturnType<typeof citiesControllerRemove>>
>;
export type EmployeesControllerLoginResult = NonNullable<
  Awaited<ReturnType<typeof employeesControllerLogin>>
>;
export type EmployeesControllerFindResult = NonNullable<
  Awaited<ReturnType<typeof employeesControllerFind>>
>;
export type EmployeesControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof employeesControllerCreate>>
>;
export type EmployeesControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof employeesControllerFindOne>>
>;
export type EmployeesControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof employeesControllerUpdate>>
>;
export type EmployeesControllerRemoveResult = NonNullable<
  Awaited<ReturnType<typeof employeesControllerRemove>>
>;
export type AdminsControllerLoginResult = NonNullable<
  Awaited<ReturnType<typeof adminsControllerLogin>>
>;
export type AdminsControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof adminsControllerCreate>>
>;
export type AdminsControllerFindResult = NonNullable<
  Awaited<ReturnType<typeof adminsControllerFind>>
>;
export type AdminsControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof adminsControllerFindOne>>
>;
export type AdminsControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof adminsControllerUpdate>>
>;
export type AdminsControllerRemoveResult = NonNullable<
  Awaited<ReturnType<typeof adminsControllerRemove>>
>;
export type RolesControllerFindResult = NonNullable<
  Awaited<ReturnType<typeof rolesControllerFind>>
>;
export type RolesControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof rolesControllerCreate>>
>;
export type RolesControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof rolesControllerFindOne>>
>;
export type RolesControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof rolesControllerUpdate>>
>;
export type RolesControllerAddPermissionsResult = NonNullable<
  Awaited<ReturnType<typeof rolesControllerAddPermissions>>
>;
export type RolesControllerDeletePermissionsResult = NonNullable<
  Awaited<ReturnType<typeof rolesControllerDeletePermissions>>
>;
export type PermissionsControllerFindResult = NonNullable<
  Awaited<ReturnType<typeof permissionsControllerFind>>
>;
export type PermissionsControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof permissionsControllerFindOne>>
>;
export type PhotosControllerUploadSingleResult = NonNullable<
  Awaited<ReturnType<typeof photosControllerUploadSingle>>
>;
export type PhotosControllerUploadMultipleResult = NonNullable<
  Awaited<ReturnType<typeof photosControllerUploadMultiple>>
>;
export type DriverControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof driverControllerCreate>>
>;
export type DriverControllerFindAllResult = NonNullable<
  Awaited<ReturnType<typeof driverControllerFindAll>>
>;
export type DriverControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof driverControllerFindOne>>
>;
export type DriverControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof driverControllerUpdate>>
>;
export type DriverControllerRemoveResult = NonNullable<
  Awaited<ReturnType<typeof driverControllerRemove>>
>;
